<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
    
    <entry>
      <title><![CDATA[用Python做Lorenz attrator的动画仿真]]></title>
      <url>http://yoursite.com/2016/07/28/%E7%94%A8Pytho%E5%81%9ALorenz-attrator%E7%9A%84%E5%8A%A8%E7%94%BB%E4%BB%BF%E7%9C%9F/</url>
      <content type="html"><![CDATA[<p>最近迷上了Lorenz attractor，于是在闲暇时间，用Python做了Lorenz attractor的动画仿真，结果还是不错的。</p>
<h2 id="什么是Lorenz-attractor"><a href="#什么是Lorenz-attractor" class="headerlink" title="什么是Lorenz attractor"></a>什么是Lorenz attractor</h2><p>简单来说，Lorenz attractor 是一个混沌的动力系统，系统对初始值非常敏感，即使初始值非常小的不同，随着时间演化，到最后能造成极大的差别。</p>
<p>这个动力系统首先由法国天气学家Lorenz发现。他在研究天气动力系统时，提出了一个非常简单的模型：</p>
<a id="more"></a>
<p>这组方程描述了大气里温度梯度，各处压强，流速等信息，但对真实情况做了太多的假设和简化，在物理上并没有参考意义，是一个“玩具模型”。但在数学上，却带了了非常有意思的发现。</p>
<p>Lorenz在一次计算时，在两组初始值相差非常小的情况下，他惊奇的发现随着时间演化，两组结果竟然产生了翻天覆地的变化，甚至截然不同。由相同方程支配的系统竟然在初始值差别非常小的情况下产生巨大的不同，这是反直觉的，正如在他随后的论文中诗意地写道：</p>
<p>于是Lorenz attractor又被称为蝴蝶效应。</p>
<p>这里需要提一下，大家在电影里看到的蝴蝶效应，是艺术家对这一现象的诗意表达，并不是真实发生的现象。</p>
<h2 id="Python求解"><a href="#Python求解" class="headerlink" title="Python求解"></a>Python求解</h2><p>首先，我们将求解以下方程：</p>
<p>我们取p=10, r=30, b=3, 两组初始值分别是（0，1，0）和（0，1，0.0000001），差别非常小！！！</p>
<p>Python里，我们利用<code>scipy.integrate</code>模块下的<code>odeint</code>函数进行求解，具体的使用方法可以参看scipy的的documentation。</p>
<p>代码如下：</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> scipy.integrate <span class="keyword">import</span> odeint </span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">lorenz</span><span class="params">(w,t,p,r,b)</span>:</span> <span class="comment">#定义求解的系统，返回函数组</span></span><br><span class="line">    x,y,z=w</span><br><span class="line">    <span class="keyword">return</span> np.array([p*(y-x),x*(r-z),x*y-b*z])</span><br><span class="line">t =np.arange(<span class="number">0</span>,<span class="number">50</span>,<span class="number">0.01</span>)<span class="comment">#定义求解区间，求解50s，时间间隔0.01s</span></span><br><span class="line">track1=odeint(lorenz, (<span class="number">0.0</span>, <span class="number">1.00</span>, <span class="number">0.000000001</span>),t,args=(<span class="number">10.0</span>,<span class="number">30.0</span>,<span class="number">3.0</span>))<span class="comment">#得到结果</span></span><br><span class="line">track2=odeint(lorenz, (<span class="number">0.0</span>, <span class="number">1.00</span>, <span class="number">0.0</span>),t,args=(<span class="number">10.0</span>,<span class="number">30.0</span>,<span class="number">3.0</span>))</span><br></pre></td></tr></table></figure>
<p>简单的几行代码，就给我们带来了求解结果，现在需要把结果可视化一下，我们首先利用<code>matplotlib</code>画出两组结果的运动轨迹：</p>
<p><img src="http://ww2.sinaimg.cn/large/006tNc79gw1f6a24ygvqgj30qg0kxah3.jpg" alt="1.png"></p>
<p>代码如下：</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> mpl_toolkits.mplot3d <span class="keyword">import</span> Axes3D</span><br><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line">fig=plt.figure(<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">ax=Axes3D(fig)</span><br><span class="line">line1=ax.plot(track1[:,<span class="number">0</span>],track1[:,<span class="number">1</span>],track1[:,<span class="number">2</span>],<span class="string">'b'</span>, markersize=<span class="number">8</span>)</span><br><span class="line">line2=ax.plot(track2[:,<span class="number">0</span>],track2[:,<span class="number">1</span>],track2[:,<span class="number">2</span>],<span class="string">'r'</span>, markersize=<span class="number">8</span>)</span><br><span class="line"></span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure>
<p>我们可以看到，红色轨迹和蓝色轨迹出现了分离，而且轨迹的形状像一只蝴蝶，这也是Lorenz要拿蝴蝶举例子的原因。</p>
<p>轨迹绕着两个“眼”运动，而且不能脱离两个“眼“，保持在其附近。这两个”眼“好像把轨迹吸引过去一样，这就是为什么叫Lorenz attractor(吸引子)的原因。</p>
<p>我们来看看X坐标随着时间的演化：</p>
<p><img src="http://ww3.sinaimg.cn/large/006tNc79gw1f6a24vzii6j30m80goadj.jpg" alt="2.png"></p>
<p>我们可以看出，两组结果X坐标在23s左右出现分离，按照相反的路线开始演化，而且变化非常剧烈。还可以看出，运动轨迹其实有一定周期规律，但不是我们常见的周期函数，这也暗示了混沌虽然变化剧烈，难以预测，但其从整体上来说，又有一定的规律性。</p>
<h2 id="Python动画仿真"><a href="#Python动画仿真" class="headerlink" title="Python动画仿真"></a>Python动画仿真</h2><p>可视化的结果只给了我们整体的轨迹曲线，并不能反应每时每刻的运动状态。于是我们紧接着用<code>matplotlib.animation</code>包进行3D的动画仿真，主要刻画出每一时刻的运动状态。</p>
<p>代码也很简单，主要用了<code>matplotlib.animation</code>里的<code>FuncAnimation</code>函数，代码如下：</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> mpl_toolkits.mplot3d <span class="keyword">import</span> Axes3D</span><br><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line"><span class="keyword">from</span> matplotlib <span class="keyword">import</span> animation <span class="comment">#这个包用于动画制作</span></span><br><span class="line"></span><br><span class="line">ax=Axes3D(fig)<span class="comment">#生成3D的轴</span></span><br><span class="line">line1=ax.plot([],[],<span class="string">'b:'</span>)<span class="comment">#初始化数据，line是估计，point是轨迹的头部</span></span><br><span class="line">point1=ax.plot([],[],<span class="string">'bo'</span>,markersize=<span class="number">10</span>)</span><br><span class="line">line2=ax.plot([],[],<span class="string">'r:'</span>)</span><br><span class="line">point2=ax.plot([],[],<span class="string">'ro'</span>,markersize=<span class="number">10</span>)</span><br><span class="line">images=[]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">init</span><span class="params">()</span>:</span><span class="comment">#该函数用于初始化动画</span></span><br><span class="line">    line1=ax.plot([],[],<span class="string">'b:'</span>,markersize=<span class="number">8</span>)</span><br><span class="line">    point1=ax.plot([],[],<span class="string">'bo'</span>,markersize=<span class="number">10</span>)</span><br><span class="line">    line2=ax.plot([],[],<span class="string">'r:'</span>,markersize=<span class="number">8</span>)</span><br><span class="line">    point2 = ax.plot([], [], <span class="string">'ro'</span>, markersize=<span class="number">10</span>）</span><br><span class="line">    <span class="keyword">return</span> line1,point1,line2,point2</span><br><span class="line">                     </span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">anmi</span><span class="params">(i)</span>:</span><span class="comment">#anmi函数用于每一帧的数据更新，i是帧数。</span></span><br><span class="line">    ax.clear()</span><br><span class="line">    line1=ax.plot(track1[<span class="number">0</span>:<span class="number">10</span>*i,<span class="number">0</span>],track1[<span class="number">0</span>:<span class="number">10</span>*i,<span class="number">1</span>],track1[<span class="number">0</span>:<span class="number">10</span>*i,<span class="number">2</span>],<span class="string">'b:'</span>, markersize=<span class="number">8</span>)</span><br><span class="line">    point1 = ax.plot(track1[<span class="number">10</span>*i<span class="number">-1</span>:<span class="number">10</span>*i,<span class="number">0</span>],track1[<span class="number">10</span>*i<span class="number">-1</span>:<span class="number">10</span>*i,<span class="number">1</span>],track1[<span class="number">10</span>*i<span class="number">-1</span>:<span class="number">10</span>*i,<span class="number">2</span>],<span class="string">'bo'</span>, markersize=<span class="number">10</span>)</span><br><span class="line">    line2 = ax.plot(track2[<span class="number">0</span>:<span class="number">10</span>*i, <span class="number">0</span>], track2[<span class="number">0</span>:<span class="number">10</span>*i, <span class="number">1</span>], track2[<span class="number">0</span>:<span class="number">10</span>*i, <span class="number">2</span>], <span class="string">'r:'</span>,markersize=<span class="number">8</span>)</span><br><span class="line">    point2 = ax.plot(track2[<span class="number">10</span>*i<span class="number">-1</span>:<span class="number">10</span> * i, <span class="number">0</span>], track2[<span class="number">10</span>*i<span class="number">-1</span>:<span class="number">10</span> * i, <span class="number">1</span>], track2[<span class="number">10</span>*i<span class="number">-1</span>:<span class="number">10</span> * i, <span class="number">2</span>], <span class="string">'ro'</span>, markersize=<span class="number">10</span>)</span><br><span class="line">    <span class="keyword">return</span> line1,point1,line2,point2</span><br><span class="line"></span><br><span class="line"><span class="comment">#animation.FuncAnimation用于动画制作，输入init函数和anmi函数，frams是帧数，一共画500祯，interval是相邻祯的间隔，单位是毫秒，此处为2毫秒</span></span><br><span class="line">anim = animation.FuncAnimation(fig, anmi, init_func=init,</span><br><span class="line">                              frames=<span class="number">500</span>, interval=<span class="number">2</span>, blit=<span class="keyword">False</span>,repeat=<span class="keyword">False</span>)</span><br></pre></td></tr></table></figure>
<p>效果如下：</p>
<center><br><br><img src="http://ww1.sinaimg.cn/large/006tNc79gw1f6a24up0nvg30a006okjv.gif" alt="LorenzAnimation.gif"><br><br></center>

<p>在这个动画里，我们清楚的看到混沌现象，两个小球初期值仅仅相差0.000001，结果在29s左右的时候竟然按照相反的轨迹演绎，之后轨迹也不会重合，非常有意思！</p>
<h2 id="用VPython进行3D实物动画模拟仿真"><a href="#用VPython进行3D实物动画模拟仿真" class="headerlink" title="用VPython进行3D实物动画模拟仿真"></a>用VPython进行3D实物动画模拟仿真</h2><p>到目前为止，虽然动画的结果基本满意，也准确反应了Lorenz Attractor的特性。但对于追求精益求精的工程师，目前的3D动画有点太过简陋了，要是有更美、更漂亮的3D实物动画，那就更好了。</p>
<p>于是上网查，果然发现了一个神器——<code>VPython</code>， 它是python环境下比较简单的3D图形库，功能也很强大，对3D动画的支持也非常好，提供的操作非常多，还能动态的画出科学曲线，很适合科学工作者去进行数据3D可视化。</p>
<p>这个包的具体使用方法可以参考网站：<a href="http://vpython.org/" target="_blank" rel="external">http://vpython.org/</a></p>
<p>那么说干就干！！</p>
<p>我们建立4个窗口，从左到右依次为：X坐标随时间的变化曲线，3D运动轨迹，X坐标变化的3D呈现，3D曲线在Y-Z平面内的投影，代码如下：</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> visual <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> visual.graph <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">scene2=display(title=<span class="string">'X Variation in fonction of t'</span>, width=<span class="number">800</span>, height=<span class="number">400</span>, x=<span class="number">800</span>,y=<span class="number">0</span>,background=(<span class="number">49</span>/<span class="number">256.0</span>,<span class="number">79</span>/<span class="number">256.0</span>,<span class="number">79</span>/<span class="number">256.0</span>))</span><br><span class="line">scene3=display(title=<span class="string">'Trajectory projected in Y-Z plan'</span>, width=<span class="number">800</span>, height=<span class="number">600</span>, x=<span class="number">800</span>,y=<span class="number">400</span>,background=(<span class="number">49</span>/<span class="number">256.0</span>,<span class="number">79</span>/<span class="number">256.0</span>,<span class="number">79</span>/<span class="number">256.0</span>))</span><br><span class="line">scene1=display(title=<span class="string">'Trajectory in 3D'</span>, width=<span class="number">800</span>, height=<span class="number">600</span>, center=(<span class="number">0</span>,<span class="number">1</span>,<span class="number">0</span>), x=<span class="number">0</span>,y=<span class="number">400</span>, background=(<span class="number">49</span>/<span class="number">256.0</span>,<span class="number">79</span>/<span class="number">256.0</span>,<span class="number">79</span>/<span class="number">256.0</span>))</span><br><span class="line"></span><br><span class="line">scene1.select()</span><br><span class="line">scene1.autocenter=<span class="keyword">True</span></span><br><span class="line">scene1.autoscale=<span class="keyword">True</span></span><br><span class="line">ball1=sphere(pos=(track1[<span class="number">0</span>,<span class="number">0</span>],track1[<span class="number">0</span>,<span class="number">1</span>],track1[<span class="number">0</span>,<span class="number">2</span>]), radius=<span class="number">1</span>, color=color.red)</span><br><span class="line">ball2=sphere(pos=(track2[<span class="number">0</span>,<span class="number">0</span>],track2[<span class="number">0</span>,<span class="number">1</span>],track2[<span class="number">0</span>,<span class="number">2</span>]),radius=<span class="number">1</span>,color=color.green)</span><br><span class="line">ball1.trail=curve(color=ball1.color)</span><br><span class="line">ball2.trail=curve(color=ball2.color)</span><br><span class="line">pointsList1=points(color=color.white,size=<span class="number">2</span>)</span><br><span class="line">pointsList2=points(color=color.white,size=<span class="number">2</span>)</span><br><span class="line"></span><br><span class="line">scene2.select()</span><br><span class="line">scene2.range=(<span class="number">40</span>,<span class="number">40</span>,<span class="number">40</span>)</span><br><span class="line">scene2.center=(<span class="number">-5</span>,<span class="number">0</span>,<span class="number">0</span>)</span><br><span class="line">scene2.forward=(<span class="number">1.8</span>,<span class="number">0</span>,<span class="number">-1</span>)</span><br><span class="line">ball3=sphere(radius=<span class="number">2</span>, color=color.red, pos=(<span class="number">0</span>,<span class="number">5</span>,<span class="number">0</span>),make_trail=<span class="keyword">True</span>,retain=<span class="number">30</span>)</span><br><span class="line">ball4=sphere(radius=<span class="number">2</span>, color=color.green, pos=(<span class="number">0</span>,<span class="number">-5</span>,<span class="number">0</span>),make_trail=<span class="keyword">True</span>,retain=<span class="number">30</span>)</span><br><span class="line">pointsList3=points(color=color.red,size=<span class="number">2</span>)</span><br><span class="line">pointsList4=points(color=color.green,size=<span class="number">2</span>)</span><br><span class="line"></span><br><span class="line">scene3.select()</span><br><span class="line">scene3.autocenter=<span class="keyword">True</span></span><br><span class="line">scene3.autoscale=<span class="keyword">True</span></span><br><span class="line">ball3_2=sphere(radius=<span class="number">2</span>, color=color.red, pos=(<span class="number">0</span>,<span class="number">5</span>,<span class="number">0</span>),make_trail=<span class="keyword">True</span>,retain=<span class="number">100</span>)</span><br><span class="line">ball4_2=sphere(radius=<span class="number">2</span>, color=color.green, pos=(<span class="number">0</span>,<span class="number">-5</span>,<span class="number">0</span>),make_trail=<span class="keyword">True</span>,retain=<span class="number">100</span>)</span><br><span class="line">pointsList3_2=points(color=color.red,size=<span class="number">2</span>)</span><br><span class="line">pointsList4_2=points(color=color.green,size=<span class="number">2</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">Curve1=gcurve(color=color.red)</span><br><span class="line">Curve2=gcurve(color=color.green)</span><br><span class="line">scale=<span class="number">0.1</span></span><br><span class="line">deltat=<span class="number">0.01</span></span><br><span class="line">t0=<span class="number">0</span></span><br><span class="line">i=<span class="number">0</span></span><br><span class="line">a=range(<span class="number">0</span>,<span class="number">5000</span>,<span class="number">100</span>)</span><br><span class="line"><span class="keyword">for</span> j <span class="keyword">in</span> range(len(t)<span class="number">-1</span>):</span><br><span class="line">    pointsList3.append(pos=vector(j, track1[j, <span class="number">0</span>], <span class="number">0</span>))</span><br><span class="line">    pointsList4.append(pos=vector(j, track2[j, <span class="number">0</span>], <span class="number">0</span>))</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> t0&lt;<span class="number">49</span>-deltat:</span><br><span class="line">   rate(<span class="number">100</span>)</span><br><span class="line">   i=i+<span class="number">1</span></span><br><span class="line">   t0=t0+deltat</span><br><span class="line">   ball1.pos=vector(track1[i,<span class="number">0</span>],track1[i,<span class="number">1</span>],track1[i,<span class="number">2</span>])</span><br><span class="line">   ball2.pos = vector(track2[i, <span class="number">0</span>], track2[i, <span class="number">1</span>], track2[i, <span class="number">2</span>])</span><br><span class="line">   ball1.trail.append(pos=ball1.pos,retain=<span class="number">100</span>)</span><br><span class="line">   pointsList1.append(pos=vector(track1[i, <span class="number">0</span>], track1[i, <span class="number">1</span>], track1[i, <span class="number">2</span>]))</span><br><span class="line">   ball2.trail.append(pos=ball2.pos,retain=<span class="number">100</span>)</span><br><span class="line">   pointsList2.append(pos=vector(track2[i, <span class="number">0</span>], track2[i, <span class="number">1</span>], track2[i, <span class="number">2</span>]))</span><br><span class="line">   </span><br><span class="line">   Curve1.plot(pos=(t0,track1[i,<span class="number">0</span>]))</span><br><span class="line">   Curve2.plot(pos=(t0, track2[i, <span class="number">0</span>]))</span><br><span class="line">   ball3.pos=vector(i,track1[i,<span class="number">0</span>],<span class="number">0</span>)</span><br><span class="line">   ball4.pos =vector(i,track2[i,<span class="number">0</span>],<span class="number">0</span>)</span><br><span class="line"></span><br><span class="line">   ball3_2.pos = vector(track1[i, <span class="number">1</span>], track1[i, <span class="number">2</span>], <span class="number">0</span>)</span><br><span class="line">   ball4_2.pos = vector(track2[i, <span class="number">1</span>], track2[i, <span class="number">2</span>], <span class="number">0</span>)</span><br><span class="line">   pointsList3_2.append(pos=vector(track1[i, <span class="number">1</span>], track1[i, <span class="number">2</span>], <span class="number">0</span>))</span><br><span class="line">   pointsList4_2.append(pos=vector(track2[i, <span class="number">1</span>], track2[i, <span class="number">2</span>], <span class="number">0</span>))</span><br><span class="line"></span><br><span class="line">   scene2.center =(ball3.pos.x<span class="number">-5</span>, <span class="number">0</span>,<span class="number">0</span>)</span><br></pre></td></tr></table></figure>
<p>运行效果如下：</p>
<p><img src="http://ww2.sinaimg.cn/large/006tNc79gw1f6a24n1n02g30hs0b44r3.gif" alt="LorenzAnimation3D.gif"></p>
<p>效果还是很好看哒！！哈哈哈哈<del>~</del></p>
<p>大家有问题可以私信问我哈~</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Python学习整理-文件的读取和操作]]></title>
      <url>http://yoursite.com/2016/07/15/Python%E5%AD%A6%E4%B9%A0%E6%95%B4%E7%90%86-%E6%96%87%E4%BB%B6%E7%9A%84%E8%AF%BB%E5%8F%96%E5%92%8C%E6%93%8D%E4%BD%9C/</url>
      <content type="html"><![CDATA[<h1 id="关于python文件读取和操作"><a href="#关于python文件读取和操作" class="headerlink" title="关于python文件读取和操作"></a>关于python文件读取和操作</h1><p>总是记不住API。昨晚写的时候用到了这些，但是没记住，于是就索性整理一下吧：</p>
<p><strong>python中对文件、文件夹os模块和shutil模块。</strong></p>
<a id="more"></a>
<p>得到当前工作目录，即当前Python脚本工作的目录路径: <strong>os.getcwd()</strong></p>
<p>返回指定目录下的所有文件和目录名:<strong>os.listdir()</strong></p>
<p>函数用来删除一个文件:<strong>os.remove()</strong></p>
<p>删除多个目录：<strong>os.removedirs（r“c：\python”）</strong></p>
<p>检验给出的路径是否是一个文件：<strong>os.path.isfile()</strong></p>
<p>检验给出的路径是否是一个目录：<strong>os.path.isdir()</strong></p>
<p>判断是否是绝对路径：<strong>os.path.isabs()</strong></p>
<p>检验给出的路径是否真地存:<strong>os.path.exists()</strong></p>
<p>返回一个路径的目录名和文件名:<strong>os.path.split()  </strong>   eg os.path.split(‘/home/swaroop/byte/code/poem.txt’) 结果：(‘/home/swaroop/byte/code’, ‘poem.txt’) </p>
<p>分离扩展名：<strong>os.path.splitext()</strong></p>
<p>获取路径名：<strong>os.path.dirname()</strong></p>
<p>获取文件名：<strong>os.path.basename()</strong></p>
<p>运行shell命令: <strong>os.system()</strong></p>
<p>读取和设置环境变量:<strong>os.getenv() 与os.putenv()</strong></p>
<p>给出当前平台使用的行终止符:_os.linesep_Windows使用’\r\n’，Linux使用’\n’而Mac使用’\r’</p>
<p>指示你正在使用的平台：_os.name_      对于Windows，它是’nt’，而对于Linux/Unix用户，它是’posix’</p>
<p>重命名：<strong>os.rename（old， new）</strong></p>
<p>创建多级目录：<strong>os.makedirs（r“c：\python\test”）</strong></p>
<p>创建单个目录：<strong>os.mkdir（“test”）</strong></p>
<p>获取文件属性：<strong>os.stat（file）</strong></p>
<p>修改文件权限与时间戳：<strong>os.chmod（file）</strong></p>
<p>终止当前进程：<strong>os.exit（）</strong></p>
<p>获取文件大小：<strong>os.path.getsize（filename）</strong></p>
<p><strong>文件操作：</strong></p>
<p><strong>os.mknod(“test.txt”)</strong>       创建空文件<br><strong>fp = open(“test.txt”,w)</strong>   直接打开一个文件，如果文件不存在则创建文件</p>
<p>关于open 模式：</p>
<p>w     以写方式打开，<br>a     以追加模式打开 (从 EOF 开始, 必要时创建新文件)<br>r+     以读写模式打开<br>w+     以读写模式打开 (参见 w )<br>a+     以读写模式打开 (参见 a )<br>rb     以二进制读模式打开<br>wb     以二进制写模式打开 (参见 w )<br>ab     以二进制追加模式打开 (参见 a )<br>rb+    以二进制读写模式打开 (参见 r+ )<br>wb+    以二进制读写模式打开 (参见 w+ )<br>ab+    以二进制读写模式打开 (参见 a+ )</p>
<p><strong>fp.read([size])</strong>                   #size为读取的长度，以byte为单位</p>
<p><strong>fp.readline([size])</strong>               #读一行，如果定义了size，有可能返回的只是一行的一部分</p>
<p><strong>fp.readlines([size])</strong>             #把文件每一行作为一个list的一个成员，并返回这个list。其实它的内部是通过循环调用readline()来实现的。如果提供size参数，size是表示读取内容的总长，也就是说可能只读到文件的一部分。</p>
<p><strong>fp.write(str)</strong>                   #把str写到文件中，write()并不会在str后加上一个换行符</p>
<p><strong>fp.writelines(seq)</strong>        #把seq的内容全部写到文件中(多行一次性写入)。这个函数也只是忠实地写入，不会在每行后面加上任何东西。</p>
<p><strong>fp.close()</strong>                     #关闭文件。python会在一个文件不用后自动关闭文件，不过这一功能没有保证，最好还是养成自己关闭的习惯。  如果一个文件在关闭后还对其进行操作会产生ValueError</p>
<p><strong>fp.flush()</strong>                                   #把缓冲区的内容写入硬盘</p>
<p><strong>fp.fileno()</strong>                                  #返回一个长整型的”文件标签“</p>
<p><strong>fp.isatty()</strong>                                  #文件是否是一个终端设备文件（unix系统中的）</p>
<p><strong>fp.tell()</strong>                                         #返回文件操作标记的当前位置，以文件的开头为原点</p>
<p><strong>fp.next()</strong>                                   #返回下一行，并将文件操作标记位移到下一行。把一个file用于for … in file这样的语句时，就是调用next()函数来实现遍历的。</p>
<p><strong>fp.seek(offset[,whence])</strong>            #将文件打操作标记移到offset的位置。这个offset一般是相对于文件的开头来计算的，一般为正数。但如果提供了whence参数就不一定了，whence可以为0表示从头开始计算，1表示以当前位置为原点计算。2表示以文件末尾为原点进行计算。需要注意，如果文件以a或a+的模式打开，每次进行写操作时，文件操作标记会自动返回到文件末尾。</p>
<p><strong>fp.truncate([size])</strong>                    #把文件裁成规定的大小，默认的是裁到当前文件操作标记的位置。如果size比文件的大小还要大，依据系统的不同可能是不改变文件，也可能是用0把文件补到相应的大小，也可能是以一些随机的内容加上去。</p>
<p><strong>目录操作：</strong><br><strong>os.mkdir(“file”)</strong>              创建目录<br>复制文件：<br><strong>shutil.copyfile(“oldfile”,”newfile”)</strong>      oldfile和newfile都只能是文件<br><strong>shutil.copy(“oldfile”,”newfile”)</strong>         oldfile只能是文件夹，newfile可以是文件，也可以是目标目录<br>复制文件夹：<br><strong>shutil.copytree(“olddir”,”newdir”)</strong>       olddir和newdir都只能是目录，且newdir必须不存在<br>重命名文件（目录）<br><strong>os.rename(“oldname”,”newname”)</strong>      文件或目录都是使用这条命令<br>移动文件（目录）<br><strong>shutil.move(“oldpos”,”newpos”)</strong><br>删除文件<br><strong>os.remove(“file”)</strong><br>删除目录<br><strong>os.rmdir(“dir”)</strong>只能删除空目录<br><strong>shutil.rmtree(“dir”)</strong>  空目录、有内容的目录都可以删<br>转换目录<br><strong>os.chdir(“path”)   </strong>换路径</p>
<p><strong>相关例子</strong></p>
<p>将文件夹下所有图片名称加上’_fc’</p>
<p><strong>python代码:</strong></p>
<figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">img_dir = 'D:\xx\xx\images'</span><br><span class="line"></span><br><span class="line">img_dir = img_dir.replace('\','/')</span><br><span class="line"></span><br><span class="line">start = time.time()</span><br><span class="line"></span><br><span class="line">i = 0</span><br><span class="line"></span><br><span class="line">change_name(img_dir)</span><br><span class="line"></span><br><span class="line">c = time.time() - start</span><br><span class="line"></span><br><span class="line">print('程序运行耗时:%0.2f'%(c))</span><br><span class="line"></span><br><span class="line">print('总共处理了 %s 张图片'%(i))</span><br><span class="line"></span><br><span class="line">输出结果：</span><br><span class="line"></span><br><span class="line">程序运行耗时:0.11</span><br><span class="line"></span><br><span class="line">总共处理了 109 张图片</span><br></pre></td></tr></table></figure>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Latex基础——图片位置排版技巧]]></title>
      <url>http://yoursite.com/2016/06/29/Latex%E5%9F%BA%E7%A1%80-%E5%9B%BE%E7%89%87%E4%BD%8D%E7%BD%AE%E6%8E%92%E7%89%88%E6%8A%80%E5%B7%A7/</url>
      <content type="html"><![CDATA[<blockquote>
<p>本文转自<a href="http://blog.sciencenet.cn/blog-561346-747243.html" target="_blank" rel="external">stone2002的个人博客</a>，并加以整理和排版，感谢作者~<br><a id="more"></a></p>
</blockquote>
<p>#图片并排</p>
<p>##1.并排摆放，共享标题<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">\begin&#123;figure&#125;[htbp]</span><br><span class="line">\centering</span><br><span class="line">\includegraphics&#123;left&#125;</span><br><span class="line">\includegraphics&#123;right&#125;</span><br><span class="line">\caption&#123;你的标题&#125;</span><br><span class="line">\end&#123;figure&#125;</span><br></pre></td></tr></table></figure></p>
<p>##2.并排摆放，各有标题<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">\begin&#123;figure&#125;[htbp]</span><br><span class="line">\centering</span><br><span class="line">\begin&#123;minipage&#125;[t]&#123;0.3\textwidth&#125;</span><br><span class="line">\centering</span><br><span class="line">\includegraphics&#123;left&#125;</span><br><span class="line">\caption&#123;标题一&#125;</span><br><span class="line">\end&#123;minipage&#125;</span><br><span class="line">\begin&#123;minipage&#125;[t]&#123;0.3\textwidth&#125;</span><br><span class="line">\centering</span><br><span class="line">\includegraphics&#123;right&#125;</span><br><span class="line">\caption&#123;标题二&#125;</span><br><span class="line">\end&#123;minipage&#125;</span><br><span class="line">\end&#123;figure&#125;</span><br></pre></td></tr></table></figure></p>
<p>##3.并排摆放，共享标题，各有子标题</p>
<p>###方法一(不推荐)<br>需要使用<code>\usepackage{subfigure}</code><br>如果想要两幅并排的图片共享一个标题，并各有自己的子标题，可以使用<code>subfig</code>宏包提供的<code>\subfloat</code>命令。subfloat命令缺少宽度参数。虽然我们可以用\hspace命令调整子图的距离，子标题却只能和子图本身一样宽，就会出现折行。<br>为了避免子标题折行，我们可以在<code>\subfloat</code>里再嵌套个<code>minipage</code>，因为后者是有宽度的。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">\begin&#123;figure&#125;[htbp]</span><br><span class="line">\centering</span><br><span class="line">\subfloat[标题一]&#123;</span><br><span class="line">\label&#123;fig:improved_subfig_a&#125;</span><br><span class="line">\begin&#123;minipage&#125;[t]&#123;0.3\textwidth&#125;</span><br><span class="line">\centering</span><br><span class="line">\includegraphics&#123;left&#125;</span><br><span class="line">\end&#123;minipage&#125;</span><br><span class="line">&#125;</span><br><span class="line">\subfloat[标题二]&#123;</span><br><span class="line">\label&#123;fig:improved_subfig_b&#125;</span><br><span class="line">\begin&#123;minipage&#125;[t]&#123;0.3\textwidth&#125;</span><br><span class="line">\centering</span><br><span class="line">\includegraphics&#123;right&#125;</span><br><span class="line">\end&#123;minipage&#125;</span><br><span class="line">&#125;</span><br><span class="line">\caption&#123;大标题&#125;</span><br><span class="line">\end&#123;figure&#125;</span><br></pre></td></tr></table></figure></p>
<p>###方法二（推荐）<br>使用latex的subfigure竖排图形<br>注意要使用宏包<code>\usepackage{graphicx}</code>和<code>\usepackage{subfigure}</code>，subfigure不支持<code>\\</code>换行，有人用minipage放在subfigure{}中，在minipage{}里换行<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">\begin&#123;figure&#125;</span><br><span class="line">\centering</span><br><span class="line">\subfigure[the first subfigure]&#123;</span><br><span class="line">\begin&#123;minipage&#125;[b]&#123;0.2\textwidth&#125;</span><br><span class="line">\includegraphics[width=1\textwidth]&#123;fig1.eps&#125; \\</span><br><span class="line">\includegraphics[width=1\textwidth]&#123;fig2.eps&#125;</span><br><span class="line">\end&#123;minipage&#125;</span><br><span class="line">&#125;</span><br><span class="line">\subfigure[the second subfigure]&#123;</span><br><span class="line">\begin&#123;minipage&#125;[b]&#123;0.2\textwidth&#125;</span><br><span class="line">\includegraphics[width=1\textwidth]&#123;fig3.eps&#125; \\</span><br><span class="line">\includegraphics[width=1\textwidth]&#123;fig4.eps&#125;</span><br><span class="line">\end&#123;minipage&#125;</span><br><span class="line">&#125;</span><br><span class="line">\end&#123;figure&#125;</span><br></pre></td></tr></table></figure></p>
<p>以上显示在单列。如果希望跨列显示，并且修改相应的宽度参数。<br><code>\begin{figure*}...\end{figure*}</code></p>
<p>#Latex插入图片相关问题</p>
<p>首先使用宏包<code>\usepackage{graphicx}</code>, <code>\usepackage{subfigure}</code></p>
<p>##竖排图形<br><code>subfigure</code>不支持<code>\\</code>换行，可以用minipage放在<code>subfigure{}</code>中，在<code>minipage{}</code>里换<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">\begin&#123;figure&#125;</span><br><span class="line">\centering</span><br><span class="line">\subfigure[the first subfigure]&#123;</span><br><span class="line">\begin&#123;minipage&#125;[b]&#123;0.2\textwidth&#125;</span><br><span class="line">\includegraphics[width=1\textwidth]&#123;fig1.eps&#125; \\</span><br><span class="line">\includegraphics[width=1\textwidth]&#123;fig2.eps&#125;</span><br><span class="line">\end&#123;minipage&#125;</span><br><span class="line">&#125;</span><br><span class="line">\subfigure[the second subfigure]&#123;</span><br><span class="line">\begin&#123;minipage&#125;[b]&#123;0.2\textwidth&#125;</span><br><span class="line">\includegraphics[width=1\textwidth]&#123;fig3.eps&#125; \\</span><br><span class="line">\includegraphics[width=1\textwidth]&#123;fig4.eps&#125;</span><br><span class="line">\end&#123;minipage&#125;</span><br><span class="line">&#125;</span><br><span class="line">\end&#123;figure&#125;</span><br></pre></td></tr></table></figure></p>
<p>##横排子图<br>使用latex的subfigure排版并排放置的两张图:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">\begin&#123;figure&#125;</span><br><span class="line">\begin&#123;minipage&#125;[t]&#123;0.5\linewidth&#125;</span><br><span class="line">\centering</span><br><span class="line">\includegraphics[width=2.2in]&#123;fig1.eps&#125;</span><br><span class="line">\caption&#123;fig1&#125;</span><br><span class="line">\label&#123;fig:side:a&#125;</span><br><span class="line">\end&#123;minipage&#125;%</span><br><span class="line">\begin&#123;minipage&#125;[t]&#123;0.5\linewidth&#125;</span><br><span class="line">\centering</span><br><span class="line">\includegraphics[width=2.2in]&#123;fig2.eps&#125;</span><br><span class="line">\caption&#123;fig2&#125;</span><br><span class="line">\label&#123;fig:side:b&#125;</span><br><span class="line">\end&#123;minipage&#125;</span><br><span class="line">\end&#123;figure&#125;</span><br></pre></td></tr></table></figure></p>
<p><strong>还有一种方法: 在某些情况下，有时会希望将并列的图形组成一组，而其中的每一幅图都保持其独立性。</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">\begin&#123;figure&#125;</span><br><span class="line">\centering</span><br><span class="line">\subfigure[Small Box with a Long Caption]&#123;</span><br><span class="line">\label&#123;fig:subfig:a&#125; %% label for first subfigure</span><br><span class="line">\includegraphics[width=1.0in]&#123;graphic.eps&#125;&#125;</span><br><span class="line">\hspace&#123;1in&#125;</span><br><span class="line">\subfigure[Big Box]&#123;</span><br><span class="line">\label&#123;fig:subfig:b&#125; %% label for second subfigure</span><br><span class="line">\includegraphics[width=1.5in]&#123;graphic.eps&#125;&#125;</span><br><span class="line">\caption&#123;Two Subfigures&#125;</span><br><span class="line">\label&#123;fig:subfig&#125; %% label for entire figure</span><br><span class="line">\end&#123;figure&#125;</span><br></pre></td></tr></table></figure></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Latex基础——minipackage使用技巧]]></title>
      <url>http://yoursite.com/2016/06/29/minipackage%E4%BD%BF%E7%94%A8%E6%8A%80%E5%B7%A7/</url>
      <content type="html"><![CDATA[<p>在图片的排版中，我们可以通过在一个图形环境中使用多个小页环境从而得到一个由 多幅图形组成的浮动图形。若将 <code>\caption</code> 命令放到每个小页环境 中，则每个小页环境就生成一浮动图形。例如：</p>
<a id="more"></a>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">\begin&#123;figure&#125; </span><br><span class="line">  \begin&#123;minipage&#125;[t]&#123;0.5\linewidth&#125; </span><br><span class="line">    \centering </span><br><span class="line">    \includegraphics[width=1in]&#123;graphic.eps&#125; </span><br><span class="line">    \caption&#123;Small Box&#125; </span><br><span class="line">    \label&#123;fig:side:a&#125; </span><br><span class="line">  \end&#123;minipage&#125;% </span><br><span class="line">  \begin&#123;minipage&#125;[t]&#123;0.5\linewidth&#125; </span><br><span class="line">    \centering </span><br><span class="line">    \includegraphics[width=1.5in]&#123;graphic.eps&#125; </span><br><span class="line">    \caption&#123;Big Box&#125; </span><br><span class="line">    \label&#123;fig:side:b&#125; </span><br><span class="line">  \end&#123;minipage&#125; </span><br><span class="line">\end&#123;figure&#125;</span><br></pre></td></tr></table></figure>
<center><br><img src="http://www.ctex.org/documents/latex/graphics/img131.gif" alt=""><br></center>

<p>生成图 27.3 和 27.4。尽管上面的命令 只使用了一个 figure 环境，但由于每个小页中都包含一 个 <code>\caption</code> 命令，所以仍然得到两个浮动图形。</p>
<p>在图 27.3 和 27.4中，并列的小页环境使用了  [t] 选项，使得两幅图形的基线对齐。这对于非旋转的图形 没有任何问题，而且使得两标题的顶部对齐。不过，如果图形的底部 不对齐的话（如其中一图形被旋转），就会发生问题。例如：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">\begin&#123;figure&#125; </span><br><span class="line">  \centering </span><br><span class="line">  \begin&#123;minipage&#125;[t]&#123;.33\textwidth&#125; </span><br><span class="line">    \centering </span><br><span class="line">    \includegraphics[width=2cm]&#123;graphic.eps&#125; </span><br><span class="line">    \caption&#123;Box with a Long Caption&#125; </span><br><span class="line">  \end&#123;minipage&#125;% </span><br><span class="line">  \begin&#123;minipage&#125;[t]&#123;.33\textwidth&#125; </span><br><span class="line">    \centering </span><br><span class="line">    \includegraphics[width=2cm,angle=-30]&#123;graphic.eps&#125; </span><br><span class="line">    \caption&#123;Rotated Box&#125; </span><br><span class="line">  \end&#123;minipage&#125;% </span><br><span class="line">\end&#123;figure&#125;</span><br></pre></td></tr></table></figure></p>
<center><br><img src="http://www.ctex.org/documents/latex/graphics/img132.gif" alt=""><br></center><br>生成图 27.5 和 27.6，我们可以看到这里 两幅图形的标题并不对齐。而若只使用小页的 [b] 选项，会使得标题 的最后一行对齐，并不能解决问题。<br><br>一种解决办法是在小页环境中把图形和标题分开放到两行中：<strong>第一行放置图形， 第二行放置标题</strong>。例如：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">\begin&#123;figure&#125; </span><br><span class="line">  \centering </span><br><span class="line">  \begin&#123;minipage&#125;[b]&#123;.33\textwidth&#125; </span><br><span class="line">    \centering </span><br><span class="line">    \includegraphics[width=2cm]&#123;graphic.eps&#125; </span><br><span class="line">  \end&#123;minipage&#125;% </span><br><span class="line">  \begin&#123;minipage&#125;[b]&#123;.33\textwidth&#125; </span><br><span class="line">    \centering </span><br><span class="line">    \includegraphics[width=2cm,angle=-30]&#123;graphic.eps&#125; </span><br><span class="line">  \end&#123;minipage&#125;\\[-10pt] </span><br><span class="line">  \begin&#123;minipage&#125;[t]&#123;.33\textwidth&#125; </span><br><span class="line">    \caption&#123;Box with a Long Caption&#125; </span><br><span class="line">  \end&#123;minipage&#125;% </span><br><span class="line">  \begin&#123;minipage&#125;[t]&#123;.33\textwidth&#125; </span><br><span class="line">    \caption&#123;Rotated Box&#125; </span><br><span class="line">  \end&#123;minipage&#125;% </span><br><span class="line">\end&#123;figure&#125;</span><br></pre></td></tr></table></figure><br><br><center><br><img src="http://www.ctex.org/documents/latex/graphics/img133.gif" alt=""><br></center>

<p>生成的图 27.7 和 27.8 中，图形的基 线和标题的第一行分别对齐。</p>
<p>在这个例子中，需要注意：</p>
<ul>
<li>在最后一幅图后面用 <code>\\</code>来断行， <code>\\</code> 的参数项  <code>[-10pt]</code> 使得图形与标题之间的距离比当前行距减少 10pt。这样做是让图形和标题更接近些，用户也可 自己选用合适的值。</li>
<li>包含图形的小页使用 <code>[b]</code> 选项，使得它们的参考点为 其最后一行的基线。</li>
<li>包含标题小页使用 <code>[t]</code> 选项，使得它们的参考点为 其第一行的基线。<br>任何一个 <code>`\label</code> 命令都必须和它相应的 <code>\caption</code>  命令在同一个小页中。</li>
</ul>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Latex基础--数学输入进阶--矩阵的输入]]></title>
      <url>http://yoursite.com/2016/06/28/Latex%E5%9F%BA%E7%A1%80-%E6%95%B0%E5%AD%A6%E8%BE%93%E5%85%A5%E8%BF%9B%E9%98%B6-%E7%9F%A9%E9%98%B5%E7%9A%84%E8%BE%93%E5%85%A5/</url>
      <content type="html"><![CDATA[<p>如何在文章里用latex输入矩阵呢？下面是几种常见的办法：</p>
<a id="more"></a>
<h2 id="在数学环境下，使用array宏包："><a href="#在数学环境下，使用array宏包：" class="headerlink" title="在数学环境下，使用array宏包："></a>在数学环境下，使用<code>array</code>宏包：</h2><p>如：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">$$</span><br><span class="line">\left[</span><br><span class="line">\begin&#123;array&#125;&#123;ccc&#125;</span><br><span class="line">a_1 &amp; a_2 &amp; a_3\\</span><br><span class="line">b_1 &amp; b_2 &amp; b_3\\</span><br><span class="line">c_1 &amp; c_2 &amp; c_3</span><br><span class="line">\end&#123;array&#125;</span><br><span class="line">\right]</span><br><span class="line">$$</span><br></pre></td></tr></table></figure>
<p>编译效果：<br>$$<br>\left[<br>\begin{array}{ccc}<br>a_1 &amp; a_2 &amp; a_3\\<br>b_1 &amp; b_2 &amp; b_3\\<br>c_1 &amp; c_2 &amp; c_3<br>\end{array}<br>\right]<br>$$<br>这种方式还可以书写增广矩阵，如下所示：<br>$$<br>\left[<br>\begin{array}{cc|c}<br>a_1 &amp; a_2 &amp; a_3\\<br>b_1 &amp; b_2 &amp; b_3\\<br>c_1 &amp; c_2 &amp; c_3<br>\end{array}<br>\right]<br>$$<br>可以书写行间矩阵，比如，这个矩阵$\left[<br>\begin{array}{ccc}<br>a_1 &amp; a_2 &amp; a_3\\<br>b_1 &amp; b_2 &amp; b_3\\<br>c_1 &amp; c_2 &amp; c_3<br>\end{array}<br>\right]$是在行间书写的。</p>
<h2 id="在数学环境下，使用matrix宏包"><a href="#在数学环境下，使用matrix宏包" class="headerlink" title="在数学环境下，使用matrix宏包"></a>在数学环境下，使用<code>matrix</code>宏包</h2><p>用法和<code>array</code>类似，如：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">\left[</span><br><span class="line">\begin&#123;matrix&#125;</span><br><span class="line">a_1 &amp; a_2 &amp; a_3\\</span><br><span class="line">b_1 &amp; b_2 &amp; b_3\\</span><br><span class="line">c_1 &amp; c_2 &amp; c_3</span><br><span class="line">\end&#123;matrix&#125;</span><br><span class="line">\right]</span><br></pre></td></tr></table></figure>
<p>效果如下：<br>$$<br>\left[<br>\begin{matrix}<br>a_1 &amp; a_2 &amp; a_3\\<br>b_1 &amp; b_2 &amp; b_3\\<br>c_1 &amp; c_2 &amp; c_3<br>\end{matrix}<br>\right]<br>$$<br>如果觉得输入<code>left{   rigth}</code> 太麻烦，还可以使用基于<code>matrix</code>的拓展宏包，如：</p>
<ul>
<li>pmatrix：用小括号括起来的矩阵。</li>
<li>bmatrix：用中括号括起来。</li>
<li>Bmatrix：用大括号括起来。</li>
<li>vmatrix：用单竖线括起来。（行列式）</li>
<li>Vmatrix：用双竖线括起来。（行列式的模）</li>
</ul>
<p>代码举例：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">$$</span><br><span class="line">\begin&#123;Vmatrix&#125;</span><br><span class="line">a_1 &amp; a_2 &amp; a_3\\</span><br><span class="line">b_1 &amp; b_2 &amp; b_3\\</span><br><span class="line">c_1 &amp; c_2 &amp; c_3</span><br><span class="line">\end&#123;Vmatrix&#125;</span><br><span class="line">$$</span><br></pre></td></tr></table></figure>
<p>编译如下：<br>$$<br>\begin{Vmatrix}<br>a_1 &amp; a_2 &amp; a_3\\<br>b_1 &amp; b_2 &amp; b_3\\<br>c_1 &amp; c_2 &amp; c_3<br>\end{Vmatrix}<br>$$</p>
<h2 id="矩阵里的省略符号"><a href="#矩阵里的省略符号" class="headerlink" title="矩阵里的省略符号"></a>矩阵里的省略符号</h2><p>省略符号如下：</p>
<ul>
<li><code>\cdots</code>：水平三个点</li>
<li><code>\vdots</code>：竖直三个点</li>
<li><code>\ddots</code>：对角线三个点</li>
</ul>
<p>代码举例：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">$$</span><br><span class="line">\begin&#123;Bmatrix&#125;</span><br><span class="line">a_1 &amp; a_2 &amp; \cdots\\</span><br><span class="line">\vdots &amp; \ddots &amp; b_3\\</span><br><span class="line">c_1 &amp; c_2 &amp; c_3</span><br><span class="line">\end&#123;Bmatrix&#125;</span><br><span class="line">$$</span><br></pre></td></tr></table></figure>
<p>编译如下：<br>$$<br>\begin{Bmatrix}<br>a_1 &amp; a_2 &amp; \cdots\\<br>\vdots &amp; \ddots &amp; b_3\\<br>c_1 &amp; c_2 &amp; c_3<br>\end{Bmatrix}<br>$$</p>
<h2 id="行间小矩阵"><a href="#行间小矩阵" class="headerlink" title="行间小矩阵"></a>行间小矩阵</h2><p>除了使用<code>`array</code>宏包以外，还可以使用<code>smallmatrix</code>宏包，这个宏包在行间的渲染效果要比<code>array</code>好，比如：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$\bigl( \begin&#123;smallmatrix&#125; a &amp; b \\ c&amp;d \end&#123;smallmatrix&#125;\bigr)$</span><br></pre></td></tr></table></figure>
<p>在句中的渲染效果$\bigl( \begin{smallmatrix}  a_1 &amp; a_2 &amp; a_3\\b_1 &amp; b_2 &amp; b_3\\c_1 &amp; c_2 &amp; c_3 \end{smallmatrix}\bigr)$。</p>
<h2 id="欢迎关注磊哥哥的个人博客，下篇文章介绍向量的输入"><a href="#欢迎关注磊哥哥的个人博客，下篇文章介绍向量的输入" class="headerlink" title="欢迎关注磊哥哥的个人博客，下篇文章介绍向量的输入"></a>欢迎关注磊哥哥的个人博客，下篇文章介绍向量的输入</h2>]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Hexo静态博客搭建基础--博文里加载本地图片]]></title>
      <url>http://yoursite.com/2016/06/26/Hexo%E9%9D%99%E6%80%81%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA%E5%9F%BA%E7%A1%80-%E5%8D%9A%E6%96%87%E9%87%8C%E5%8A%A0%E8%BD%BD%E6%9C%AC%E5%9C%B0%E5%9B%BE%E7%89%87/</url>
      <content type="html"><![CDATA[<h1 id="文章里加载本地图片"><a href="#文章里加载本地图片" class="headerlink" title="文章里加载本地图片"></a>文章里加载本地图片</h1><p>在使用Hexo的过程中，对文章图片的加载比较蛋疼。一般而言，大家都是使用图床，但是图床使用起来一方面比较麻烦，要先上传，再复制链接，有时候还会遇到图床被强或者广告的困扰。对于一些图片不多的文章，完全可以加载本地图片，然后在博文里显示，下面是做法：</p>
<a id="more"></a>
<p>首先，新建文章：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Hexo <span class="keyword">new</span> <span class="string">"文章"</span></span><br></pre></td></tr></table></figure>
<p>然后，把本地图片放到：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/source/img/</span><br></pre></td></tr></table></figure>
<p>文件夹下，如果没有自己创建一个。</p>
<p>接着，在文章需要插入图片的地方，写入：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">！[](/img/你的图片)</span><br></pre></td></tr></table></figure>
<p><strong>注意图片路径，要按照上面的写</strong></p>
<p>然后生成和部署你的博客：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Hexo g -d</span><br></pre></td></tr></table></figure>
<p>好了，一般情况下，图片是可以正常显示的。但注意，<strong>加载本地图片适用于图片不多，每个图片不大的文章，如果图片太多太大，则会导致文章加载过慢，也会占用你服务器的储存空间。鉴于大部分人使用github来托管自己的blog，免费的空间只有300mb，为了常用打算，还是要谨慎使用服务器里的空间。</strong></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[给姑娘的酒单]]></title>
      <url>http://yoursite.com/2016/06/26/%E7%BB%99%E5%A7%91%E5%A8%98%E7%9A%84%E9%85%92%E5%8D%95/</url>
      <content type="html"><![CDATA[<blockquote>
<p>出自于磊哥哥的知乎专栏—<a href="https://zhuanlan.zhihu.com/p/20651428?refer=leigege" target="_blank" rel="external">给姑娘的酒单</a></p>
</blockquote>
<h2 id="写在前面"><a href="#写在前面" class="headerlink" title="写在前面"></a>写在前面</h2><p>自古以来，男人喝酒，天经地义，姑娘喝酒，就显得有点有悖常理。这句话10年前说还行，现在说，别怪我没提醒你买保险……</p>
<a id="more"></a>
<p>咱们喝酒，有两种人，一种是会喝酒，一种是能喝酒。能喝酒的人酒量好，一鼓作气，2斤白的，20瓶啤的，最后再来几口红的借借洋气。会喝酒的酒量通常一般，但对酒的品味独到，能尝出些门道来，能说说酒的故事来。这两种人，都是爱酒如命，但磊哥哥希望的，是大家都成为会喝酒的人。这年头，在酗酒拼酒盛行的年代，对酒有品位，能静静品尝，并说出来自己感觉的人不多了，希望你能成为下一个。</p>
<p>会喝酒，其实是对生活品质的美好追求。小伙子要会喝，姑娘更要会喝。想想一个姑娘拿着一小瓶酩悦香槟，醉眼星稀，双颊嫩红，和你大讲葡萄酒的来源。再想想一个姑娘，在酒吧和你一杯一杯地喝着斯米诺黑牌，有一搭没一搭地说着：这酒吧装修不错……这品味，这气势，这见识，磊哥哥一想，就不由得双腿发软，心向往之……</p>
<p> <img src="/img/5-01.jpg" alt="5-01"></p>
<p>曾认识不少爱喝酒的姑娘。很早就有人叫我推荐给姑娘的酒单了，但是现在姑娘品味越来越高，会喝酒的姑娘也不在少数，进口啤酒或者鸡尾酒只能骗骗大学生，要想找到姑娘们都喜欢的酒，这个任务，确实挺难。</p>
<p>虽然难，但是答应别人的事得做，这不，这份<strong>姑娘的酒单</strong>就来了。这个酒单里的酒，我挑选了几个和姑娘们喝过的，并且被姑娘们肯定过，算是履行之前的承诺，也给各位想喝点好酒的美女，或是想提升自己的品味的姑娘，或是给想追姑娘的小伙子，带来些有意思的东西。</p>
<p>闲话不说，酒单来了……</p>
<h3 id="梅子酒"><a href="#梅子酒" class="headerlink" title="梅子酒"></a>梅子酒</h3><p> <img src="/img/20145151133490.jpg" alt="20145151133490"></p>
<p>梅子酒是在蒸馏酒中（通常中国白酒、日本清酒），长时间浸泡梅子入味的一种浸泡酒。她甜美清新，兼容了水果的甜香柔美和烈酒的浓烈，两种风情交揉在一起，风格突出，令人沉醉。</p>
<p>淡黄色的梅子酒能够激发人的食欲，酸酸甜甜的味道也能够解腻，所以，她既可以在饭前喝，当做开胃酒，也可以作为餐后酒。当然，你如果愿意，想什么时候喝就什么时候喝，随时来点梅子酒，随时感受被水果清香包围的快乐。</p>
<p>梅子酒中，中国酿制的梅子酒酒味偏重（因为拿白酒作为基酒），果香不够浓郁。对姑娘来说，磊哥哥推荐来自日本的梅子酒(Ume Shu)。这种酒拿清酒浸泡，几乎尝不出酒味来，喝一口，满嘴都是梅子的香甜，好像自己漫步在一片梅花从里，走着走着，渐渐地，渐渐地，迷失了自己……</p>
<h3 id="清酒"><a href="#清酒" class="headerlink" title="清酒"></a>清酒</h3><p> <img src="/img/19300001130977129939818406365.jpg" alt="19300001130977129939818406365"></p>
<p>清酒采用大米酿制，是米酒的一种。她最早的起源可以追溯到公元三世纪从中国带到日本的发酵米酒，从那以后，在日本人严谨又浪漫的经营下，她变成了一种独特成熟的酒精饮品，成为日本独特的文化符号。</p>
<p>清酒味道甘醇，口感细腻复杂。饮清酒时，第一口甘甜淡雅，第二口果香四溢，到第三口，清酒里特有的米香就会在味蕾绽放。这种酒适合冷饮或热饮，她简单分为4大类：</p>
<ul>
<li>Daigingo 大吟醸：顶级日本清酒，制作工艺精细复杂，口感细腻，适合冷饮或室温饮用；</li>
<li>Gingo 吟醸：高级日本清酒，口感淡雅芳香，适合冷饮或室温饮用；</li>
<li>Junmai 纯米醸：口感醇厚，略带酸味，适合搭配各种美食，适合热饮；</li>
<li>Honjozo 本醸造：口感干而顺滑，酒味较重，适合热饮</li>
</ul>
<h3 id="热红酒"><a href="#热红酒" class="headerlink" title="热红酒"></a>热红酒</h3><p><img src="/img/095454985.jpg" alt="095454985"></p>
<p><strong>热红酒</strong>来源欧洲，全名叫做圣诞热红酒（Vin chaud Noel），过去，当红酒变质走味后，人们发现透过添加一些辛香料、糖份加热煮过之后，变质的红酒就能再度被饮用。后来这种香料热红酒逐渐演变成冬天的饮料，特别是在圣诞节期间，这种饮料成了许多欧洲国家的经典节庆饮品。 这一天，欧洲很多国家家家户户都会煮一壶热气腾腾的热红酒，和家人分享，和爱人共饮。甜甜的热红酒，由于糖盖住了红酒的苦涩，很多香料也让它的味道变得复杂，所以这一杯温暖和情谊，让很多人的喜爱，即便是喜欢新鲜的年轻人也会被它深深吸引。在圣诞节这一天，很多人也会为街上的流浪汉准备热红酒，这个简单的酒，会去除他们冬天的寒冷和痛苦。</p>
<h3 id="Sauterne-苏玳贵腐葡萄酒"><a href="#Sauterne-苏玳贵腐葡萄酒" class="headerlink" title="Sauterne 苏玳贵腐葡萄酒"></a>Sauterne 苏玳贵腐葡萄酒</h3><center><br><br> <img src="/img/d&#39;Yquem Sauternes-1.jpg" alt="d&#39;Yquem Sauternes-1"><br><br></center>

<p>深金黄色的酒裙，无与伦比的优雅，酒香丰富均衡，余味悠长芬芳，唇齿留香。年轻时浓得坚硬结实，成熟时丰沛圆融，每一次品尝都是味觉的惊喜。这就是闻名遐迩的苏玳(Sauternes)甜白葡萄酒。</p>
<p>说苏玳葡萄酒是上帝的恩赐一点都不为过，因为贵腐菌很娇贵，不是在任何葡萄园都能出现和传播，它的产生需要一种独特的微型气候——早上阴冷，水汽充足，下午干燥炎热。早上潮湿的气候有利于贵腐菌滋生蔓延，中午过后的干热天气又能抑制其生长，使葡萄果粒里的水分从感染处蒸发脱水，提高葡萄的甜度。全球各方面条件都能达到这样要求的产区可谓凤毛麟角，而法国的苏玳产区却正是为贵腐菌而生。</p>
<p>“苏玳”也确实是葡萄酒中文界难得的漂亮翻译，将古玉的名字赋予色泽金黄温润又稀有的贵腐甜酒，文字和画面的意象完美结合，雅致而不失含蓄。用于酿制苏玳甜酒的主力葡萄品种是赛美蓉（Sémillon），这种皮很薄的葡萄非常容易受到贵腐菌的感染。它能为葡萄酒带来油质、丰富而圆润的口感，和特征性的坚果、蜂蜜（或者蜂蜡）和金合欢花的香气，并且拥有非常好的陈年潜力。</p>
<p>这款酒，毫无疑问，由于她的珍贵和稀有，成为了女神最爱。所有葡萄酒爱好者一辈子以尝到滴金酒庄（Château d’Yquem：苏玳产区最好的酒庄）为荣。</p>
<h3 id="琼瑶浆"><a href="#琼瑶浆" class="headerlink" title="琼瑶浆"></a>琼瑶浆</h3><p> <img src="/img/43_P_1422123458911.jpg" alt="43_P_1422123458911"></p>
<p>如果你觉得苏黛太过甜腻，那么该试一试<strong>琼瑶浆</strong>了。琼瑶浆（Gewurztraminer）是一种原产自中欧的葡萄品种。她的皮为粉红色，带有独特的荔枝香味。用这种葡萄酿制的白葡萄酒，酒精度较高，但丝毫感受不出强烈的酒精。她色泽金黄，香气浓郁甜美，口感讨人喜欢，有浓烈的芒果、荔枝、玫瑰、肉桂等香味，酒体结构丰满，口感圆润，非常适合在夏天引用，也适合搭配海鲜、白肉、酸奶等食物。</p>
<p>最好的琼瑶浆产自于法国的Alsace，由于磊哥哥在法国读书时离这一产区很近，几乎天天要喝一口琼瑶浆，让自己徜徉在荔枝丛里，对琼瑶浆爱不释手，个人以为，琼瑶浆是最好的白葡萄酒。</p>
<h3 id="Pinot-Noir-—-黑皮诺"><a href="#Pinot-Noir-—-黑皮诺" class="headerlink" title="Pinot Noir — 黑皮诺"></a>Pinot Noir — 黑皮诺</h3><p> <img src="/img/Co-operative-Premium-Casablanca-Valley-Pinot-Noir.jpg" alt="Co-operative-Premium-Casablanca-Valley-Pinot-Noir"></p>
<p>既然说了最好的白葡萄酒，那么最好的红葡萄酒是什么呢？个人以为，<strong>Pinot Noir 黑皮诺</strong>，也许是最好喝的红葡萄酒。</p>
<p>黑皮诺葡萄是在世界上最受欢迎的葡萄之一。这种细小的葡萄成熟较迟，由此能酿造香气细腻，酒质丰富充实，容易入口，味略带杏仁香味。</p>
<p>她年轻时带着新鲜草莓，黑樱桃的香气，成熟后展现出复杂的蘑菇、动物的皮毛味道。大多数黑皮诺需在三至五年内享受，上好的黑皮诺则会使用橡木桶熟成，拥有数十年的陈年潜力。黑皮诺是细致优雅派葡萄酒的代表品种，那种对气候、土壤、地形严格要求的娇生惯养，造就了它的精细。永远充满浓郁的果香，淡淡的色泽和轻盈的口感，很适合亚洲人的口味，与中国菜也很搭。</p>
<p>黑皮诺是Alsace地区唯一的红葡萄品种，磊哥哥在红葡萄酒中，几乎只喝黑皮诺，相信我，一旦你尝到她，一定会被她深深吸引。</p>
<h3 id="Porto波特酒"><a href="#Porto波特酒" class="headerlink" title="Porto波特酒"></a>Porto波特酒</h3><p> <img src="/img/Porto.jpg" alt="Porto"></p>
<p>波特酒（Porto）是一种加强型甜葡萄酒，素来都被称为葡萄牙的“国酒”。波特酒的酿造工艺复杂，首先在葡萄的采收上就已经费时费力。葡萄开始收获时，由于杜罗河上游的气候条件差异非常大，葡萄成熟度不同，因此收获期通常需要持续5周左右。就连已经可以实现机械化的葡萄汁压榨，也完全改用人工踩踏的方式。波特酒开始发酵后，酿酒师根据自身经验，会将正在发酵的葡萄酒灌入已经预先添加了五分之一白兰地的橡木桶中，这种白兰地的酒精含量高达77%，调和后酒精含量为20%左右，酵母菌被杀死，发酵过程终止，酒中有大量的残余糖分，因而波特酒也被归为甜酒的一种。</p>
<p>波特酒口感通常是丰富，甜美，厚重,  带有浓郁的葡萄果香，入口甘甜，略带涩感，似乎在和一杯葡萄汁，随后，强烈的酒精从甘甜的外表下显出，酒味随即变得浓郁。这种酒，常于餐后作为甜点酒享用，常与奶酪一起享用，也可作为开胃酒。</p>
<h3 id="白州10年威士忌"><a href="#白州10年威士忌" class="headerlink" title="白州10年威士忌"></a>白州10年威士忌</h3><p> <img src="/img/23374829176_00ace19490_b.jpg" alt="23374829176_00ace19490_b"></p>
<p>对于喜欢高度烈酒的姑娘来说，日本和台湾的单一麦芽威士忌能更容易让你感受到这种酒的精致和美好。日本威士忌历史悠久，师从苏格兰，但却没有全盘照抄，而是结合自己名族的性格将其发扬光大，最近在国际舞台上大展头角，台湾威士忌作为一股新生力量，走日本威士忌的路线，国际知名度也是水涨船高。这里推荐的白州10威士忌，是日本威士忌的经典之作，它体态轻盈，闻之花果香四溢，淡淡的橘子味和青草味，香味和酒精相得益彰，喝一口，淡琥珀色的液体在你的味蕾上舞蹈，挑动着你，轻轻飘飘的，淡雅的甜味和清新土地的气息极容易使人联想起樱花飘飘的景象，这是一款有”禅意”的酒。</p>
<h2 id="写在最后"><a href="#写在最后" class="headerlink" title="写在最后"></a>写在最后</h2><p>只能说，这是一份最基础的酒单，里面的酒也不是高大上的奢饰品，更不是百年不遇的珍酿。但我相信，有品位、对生活有追求的姑娘也不会在乎这些，好喝、喝的开心快乐才是会喝酒的真谛。希望你看了这份酒单，去尝试一些，并且爱上其中的某些酒。如果这样，我写这份酒单的目的也就达到了，也不枉我辛苦垒字，哈哈，最后，祝每一位姑娘喝的开心。</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Latex基础—数学输入进阶—方程组的输入]]></title>
      <url>http://yoursite.com/2016/06/24/Latex%E5%9F%BA%E7%A1%80%E2%80%94%E6%95%B0%E5%AD%A6%E8%BE%93%E5%85%A5%E8%BF%9B%E9%98%B6%E2%80%94-%E6%96%B9%E7%A8%8B%E7%BB%84%E7%9A%84%E8%BE%93%E5%85%A5/</url>
      <content type="html"><![CDATA[<p>除了基本的数学公式外，有时需要输入复杂的公式，比如矩阵、方程组、张量、复杂的微分方程组等等，下面磊哥哥就介绍下几种复杂公式的输入方式：</p>
<a id="more"></a>
<h2 id="方程组"><a href="#方程组" class="headerlink" title="方程组"></a>方程组</h2><p>使用<code>begin{array}</code>宏包，例如：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">\begin&#123;equation&#125;</span><br><span class="line">  %</span><br><span class="line">	\begin&#123;array&#125;&#123;l&#125;%array宏包只能在equation宏包里使用，这里，l是方程左对齐，还有r和c</span><br><span class="line">	\bm&#123;M&#125;\dot&#123;\bm&#123;u&#125;&#125; + \bm&#123;\Phi&#125;^T(\bm&#123;p&#125;)\bm&#123;\lambda&#125; = \left(\bm&#123;\Pi&#125;^P\right)^T\bm&#123;f&#125; \\</span><br><span class="line">	\\</span><br><span class="line">	\bm&#123;\Gamma&#125;-\bm&#123;B&#125;^T\bm&#123;\vec&#123;J&#125;&#125;\bm&#123;B&#125;\bm&#123;\xi&#125;=\bm&#123;0&#125;\\</span><br><span class="line">	\\</span><br><span class="line">	\dot&#123;\bm&#123;\Gamma&#125;&#125; - \left(\frac&#123;\partial \bm&#123;K&#125;&#125;&#123;\partial \bm&#123;\varepsilon&#125;&#125;\right)^T + \bm&#123;\Phi&#125;^T(\bm&#123;\varepsilon&#125;)\bm&#123;\lambda&#125; = \left(\bm&#123;\Pi&#125;^R\right)^T\bm&#123;\vec&#123;n&#125;&#125;\\</span><br><span class="line">	\\</span><br><span class="line">	\dot&#123;\bm&#123;p&#125;&#125;-\bm&#123;u&#125; =\bm&#123;0&#125;\\</span><br><span class="line">	\\</span><br><span class="line">	\dot&#123;\bm&#123;\varepsilon&#125;&#125;	- \bm&#123;\xi&#125; = \bm&#123;0&#125;</span><br><span class="line">	\end&#123;array&#125;</span><br><span class="line">	%</span><br><span class="line">\end&#123;equation&#125;</span><br></pre></td></tr></table></figure>
<p>编译出来如下</p>
<center><br><br><img src="/img/4-01.png" alt="01"><br><br></center><br> 上面的代码，有几个输入需要注意：<br><br>1. <code>\bm{}</code> 是在数学环境里给字体加粗。在数学环境里，<code>\textbf{}</code>已经不能用了，要用<code>\bm{}</code>来加粗，使用这个命令需要引入 <code>\usepackage{bm}</code><br><br>2. <code>\vec{}</code> 是向量的输入，但它只适合输入单个字母的向量，比如：<br><br>   <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">\vec&#123;a&#125;</span><br><span class="line">\vec&#123;n&#125;_i</span><br></pre></td></tr></table></figure><br><br>   $$<br>   \vec{a}\\<br>   \vec{n}_i<br>   $$<br><br>   如果输入多个字母向量，如<code>\vec{ABC}</code>则会显得不好看，因为箭头太短了：<br>   $$<br>   \vec{ABC}<br>   $$<br>   解决方案是，输入<code>\overrightarrow{ABC}</code>，加一个箭头，就好看了不少:<br>$$<br>\overrightarrow{ABC}<br>$$<br><br><br>1. 如果需要把方程组用括号括起来，只需要用<code>\left\{</code> <code>\rigth\}</code> 把array环境括起来，如：<br><br>   <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">\begin&#123;equation&#125;</span><br><span class="line">  \left&#123; 左边的大括号</span><br><span class="line">	\begin&#123;array&#125;&#123;l&#125;%array宏包只能在equation宏包里使用，这里，l是方程左对齐，还有r和c</span><br><span class="line">	\bm&#123;M&#125;\dot&#123;\bm&#123;u&#125;&#125; + \bm&#123;\Phi&#125;^T(\bm&#123;p&#125;)\bm&#123;\lambda&#125; = \left(\bm&#123;\Pi&#125;^P\right)^T\bm&#123;f&#125; \\</span><br><span class="line">	\\</span><br><span class="line">	\bm&#123;\Gamma&#125;-\bm&#123;B&#125;^T\bm&#123;\vec&#123;J&#125;&#125;\bm&#123;B&#125;\bm&#123;\xi&#125;=\bm&#123;0&#125;\\</span><br><span class="line">	\\</span><br><span class="line">	\dot&#123;\bm&#123;\Gamma&#125;&#125; - \left(\frac&#123;\partial \bm&#123;K&#125;&#125;&#123;\partial \bm&#123;\varepsilon&#125;&#125;\right)^T + \bm&#123;\Phi&#125;^T(\bm&#123;\varepsilon&#125;)\bm&#123;\lambda&#125; = \left(\bm&#123;\Pi&#125;^R\right)^T\bm&#123;\vec&#123;n&#125;&#125;\\</span><br><span class="line">	\\</span><br><span class="line">	\dot&#123;\bm&#123;p&#125;&#125;-\bm&#123;u&#125; =\bm&#123;0&#125;\\</span><br><span class="line">	\\</span><br><span class="line">	\dot&#123;\bm&#123;\varepsilon&#125;&#125;	- \bm&#123;\xi&#125; = \bm&#123;0&#125;</span><br><span class="line">	\end&#123;array&#125;</span><br><span class="line">	\rigth&#125; 右边的大括号</span><br><span class="line">\end&#123;equation&#125;</span><br></pre></td></tr></table></figure><br><br>   编译如下：<br>   <center><br>   <img src="/img/4-02.png" alt="02"><br>   </center>

<p>如果不想用右边的括号，只需把<code>\right\{</code>变成<code>\righe.</code>**注意<code>\right.</code>是必须要加的，否则会出现编译错误，这是初学者容易犯的错误.</p>
<p>编译如下：</p>
<center><br><br><img src="/img/4-03.png" alt="03"><br><br></center>

<ol>
<li><p>使用<code>begin{align*}</code>宏包，也能得到相同的效果，代码如下：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">\begin&#123;align*&#125;</span><br><span class="line">	&amp;&#123;M\dot u&#125; + \Phi^T(p)\lambda = \left(\Pi^P\right)^Tf </span><br><span class="line">	\\</span><br><span class="line">	&amp;\Gamma-B^T\vec&#123;J&#125;B\xi=0\\</span><br><span class="line">	\\</span><br><span class="line">	&amp;\dot&#123;\Gamma&#125; - \left(\frac&#123;\partial K&#125;&#123;\partial \varepsilon&#125;\right)^T + \Phi^T(\varepsilon)\lambda = \left(\Pi^R\right)^T\vec&#123;n&#125;\\</span><br><span class="line">	\\</span><br><span class="line">	&amp;\dot&#123;p&#125;-u =0\\</span><br><span class="line">	\\</span><br><span class="line">	&amp;\dot&#123;\varepsilon&#125;	- \xi = 0</span><br><span class="line">	</span><br><span class="line">\end&#123;align*&#125;</span><br></pre></td></tr></table></figure>
<p> 编译效果：<br><center><br><img src="/img/4-04.png" alt="04"><br></center><br><strong>注意：使用<code>&amp;</code>符号来标记方程对其的位置，在上面的代码里，每个方程最开始加上<code>&amp;</code>,表示方程组左对齐，否则，<code>begin{align*}</code>默认是右对齐，就不好看了，如下面显示：</strong><br><center><br><img src="/img/4-05.png" alt="05"><br></center></p>
<h2 id="未完待续，下一遍介绍矩阵输入的相关技巧"><a href="#未完待续，下一遍介绍矩阵输入的相关技巧" class="headerlink" title="未完待续，下一遍介绍矩阵输入的相关技巧"></a>未完待续，下一遍介绍矩阵输入的相关技巧</h2></li>
</ol>
<p><strong>关注磊哥哥的技术blog</strong></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Latex基础——在每章前插入目录]]></title>
      <url>http://yoursite.com/2016/06/24/Latex%E5%9F%BA%E7%A1%80%E2%80%94%E5%9C%A8%E6%AF%8F%E7%AB%A0%E5%89%8D%E6%8F%92%E5%85%A5%E7%9B%AE%E5%BD%95/</url>
      <content type="html"><![CDATA[<h1 id="Latex基础-——在每章前插入目录"><a href="#Latex基础-——在每章前插入目录" class="headerlink" title="Latex基础 ——在每章前插入目录"></a>Latex基础 ——在每章前插入目录</h1><p>写论文时，除了在最前面有整个文章的目录，有时还需要在每一章之前插入一个小目录，罗列出这一章的内容梗概。特别是某一章很长时，或者章节结构比较复杂，次级段落比较多时，这种做法能让读者清楚地把握章节的梗概，并且能够快速查询到自己感兴趣的内容。</p>
<p>磊哥哥在撰写实习论文是，每章内容都比较多，而且结构较复杂，于是就打算每一章开始，先写一段引言，然后插入章节的小目录，这样会显得文章比较清楚。</p>
<a id="more"></a>
<p>插入小目录需要的宏包: minitoc</p>
<h2 id="使用方法："><a href="#使用方法：" class="headerlink" title="使用方法："></a>使用方法：</h2><ol>
<li><p>引言中插入：<code>usepackage minitoc</code></p>
</li>
<li><p>然后在你需要插入小目录的地方（通常是章节最前或者引言之后）写入：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">\mtcsettitle&#123;minitoc&#125;&#123;Sommaire du Chapitre 2&#125; % 设置小目录标题</span><br><span class="line">\minitoc %引入小目录</span><br></pre></td></tr></table></figure>
</li>
</ol>
<h2 id="基本设置："><a href="#基本设置：" class="headerlink" title="基本设置："></a>基本设置：</h2><ol>
<li><p><strong>修改小目录标题</strong>, 在引入小目录之前插入</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">\mtcsettitle&#123;minitoc&#125;&#123;Sommaire du Chapitre 2&#125;</span><br></pre></td></tr></table></figure>
<pre><code>如果要全局修改，每一章的标题都一样。只需在latex引言出插入上段代码即可
</code></pre></li>
<li><p><strong>设置显示深度</strong> ， 在latex引言出插入：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">\setcounter&#123;minitocdepth&#125;&#123;3&#125;% 3表示显示到subsubsection, 2表示显示到subsection, 1表示显示到section</span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>几个小设置</strong> , 需要将其放到latex引言区，跟在use package minitoc后面</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">\dominitoc[n] %不显示名字</span><br><span class="line">\dominitoc[c] %名字居中</span><br><span class="line"></span><br><span class="line">\nomtcule %去掉名字下面的横线</span><br><span class="line">\undotted %去掉中间的点</span><br><span class="line">\nomtcpagenumbers %不要后面的页</span><br></pre></td></tr></table></figure>
</li>
</ol>
<h2 id="注意"><a href="#注意" class="headerlink" title="注意"></a><strong>注意</strong></h2><p>如果使用iuclude 命令插入每一章节时，一定要在include前插入：<code>\setcounter{mtc}{对应前面的章节数量}</code></p>
<p>比如：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">\setcounter&#123;mtc&#125;&#123;3&#125;%在intruduction章节前，已经有3个章节了，所以是3</span><br><span class="line">\input&#123;include/Introduction&#125;</span><br></pre></td></tr></table></figure>
<p>效果如下图：</p>
<p>  <img src="/img/2-01.png" alt="2-01"></p>
<p>整体效果:</p>
<p> <img src="/img/2-02.png" alt="2-02"></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[一份Markdown语言教程]]></title>
      <url>http://yoursite.com/2016/06/23/%E4%B8%80%E4%BB%BDMarkdown%E8%AF%AD%E8%A8%80%E6%95%99%E7%A8%8B/</url>
      <content type="html"><![CDATA[<h2 id="什么是-Markdown"><a href="#什么是-Markdown" class="headerlink" title="什么是 Markdown"></a>什么是 Markdown</h2><p>Markdown 是一种方便记忆、书写的纯文本标记语言，用户可以使用这些标记符号以最小的输入代价生成极富表现力的文档：譬如您正在阅读的这份文档。它使用简单的符号标记不同的标题，分割不同的段落，<strong>粗体</strong> 或者 _斜体_ 某些文字，更棒的是，它还可以：</p>
<a id="more"></a>
<h3 id="1-制作一份待办事宜-Todo-列表"><a href="#1-制作一份待办事宜-Todo-列表" class="headerlink" title="1. 制作一份待办事宜 Todo 列表"></a>1. 制作一份待办事宜 <a href="https://www.zybuluo.com/mdeditor?url=https://www.zybuluo.com/static/editor/md-help.markdown#13-待办事宜-todo-列表" target="_blank" rel="external">Todo 列表</a></h3><ul>
<li>[ ] 支持以 PDF 格式导出文稿</li>
<li>[ ] 改进 Cmd 渲染算法，使用局部渲染技术提高渲染效率</li>
<li>[x] 新增 Todo 列表功能</li>
<li>[x] 修复 LaTex 公式渲染问题</li>
<li>[x] 新增 LaTex 公式编号功能</li>
</ul>
<h3 id="2-书写一个质能守恒公式-LaTeX"><a href="#2-书写一个质能守恒公式-LaTeX" class="headerlink" title="2. 书写一个质能守恒公式[^LaTeX]"></a>2. 书写一个质能守恒公式[^LaTeX]</h3><p>$$E=mc^2$$</p>
<h3 id="3-高亮一段代码-code"><a href="#3-高亮一段代码-code" class="headerlink" title="3. 高亮一段代码[^code]"></a>3. 高亮一段代码[^code]</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@requires_authorization</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">SomeClass</span>:</span></span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    <span class="comment"># A comment</span></span><br><span class="line">    <span class="keyword">print</span> <span class="string">'hello world'</span></span><br></pre></td></tr></table></figure>
<h3 id="4-高效绘制-流程图"><a href="#4-高效绘制-流程图" class="headerlink" title="4. 高效绘制 流程图"></a>4. 高效绘制 流程图</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">st=&gt;start: Start</span><br><span class="line">op=&gt;operation: Your Operation</span><br><span class="line">cond=&gt;condition: Yes or No?</span><br><span class="line">e=&gt;end</span><br><span class="line"></span><br><span class="line">st-&gt;op-&gt;cond</span><br><span class="line">cond(yes)-&gt;e</span><br><span class="line">cond(no)-&gt;op</span><br></pre></td></tr></table></figure>
<h3 id="5-高效绘制-序列图"><a href="#5-高效绘制-序列图" class="headerlink" title="5. 高效绘制 序列图"></a>5. 高效绘制 序列图</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Alice-&gt;Bob: Hello Bob, how are you?</span><br><span class="line">Note right of Bob: Bob thinks</span><br><span class="line">Bob--&gt;Alice: I am good thanks!</span><br></pre></td></tr></table></figure>
<h3 id="6-绘制表格"><a href="#6-绘制表格" class="headerlink" title="6. 绘制表格"></a>6. 绘制表格</h3><table>
<thead>
<tr>
<th>项目</th>
<th style="text-align:right">价格</th>
<th style="text-align:center">数量</th>
</tr>
</thead>
<tbody>
<tr>
<td>计算机</td>
<td style="text-align:right">\$1600</td>
<td style="text-align:center">5</td>
</tr>
<tr>
<td>手机</td>
<td style="text-align:right">\$12</td>
<td style="text-align:center">12</td>
</tr>
<tr>
<td>管线</td>
<td style="text-align:right">\$1</td>
<td style="text-align:center">234</td>
</tr>
</tbody>
</table>
<h3 id="7-更详细语法说明"><a href="#7-更详细语法说明" class="headerlink" title="7. 更详细语法说明"></a>7. 更详细语法说明</h3><p>想要查看更详细的语法说明，可以参考准备的 <a href="https://www.zybuluo.com/mdeditor?url=https://www.zybuluo.com/static/editor/md-help.markdown" target="_blank" rel="external">Markdown 简明语法手册</a>，进阶用户可以参考 <a href="https://www.zybuluo.com/mdeditor?url=https://www.zybuluo.com/static/editor/md-help.markdown#cmd-markdown-高阶语法手册" target="_blank" rel="external"> Markdown 高阶语法手册</a> 了解更多高级功能。</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[世界啤酒入门——精酿啤酒吧装腔指南]]></title>
      <url>http://yoursite.com/2016/06/23/%E4%B8%96%E7%95%8C%E5%95%A4%E9%85%92%E5%85%A5%E9%97%A8%E2%80%94%E2%80%94%E7%B2%BE%E9%85%BF%E5%95%A4%E9%85%92%E5%90%A7%E8%A3%85%E8%85%94%E6%8C%87%E5%8D%97-1/</url>
      <content type="html"><![CDATA[<h2 id="世界啤酒入门——精酿啤酒吧装腔指南"><a href="#世界啤酒入门——精酿啤酒吧装腔指南" class="headerlink" title="世界啤酒入门——精酿啤酒吧装腔指南"></a>世界啤酒入门——精酿啤酒吧装腔指南</h2><p>周六和几个朋友一同去了巴黎最好的精酿啤酒吧 <strong>la fine mousse</strong>。这个小酒吧位于la place de République附近，面积不大，只有一个吧台，几个桌子，几个皮椅子，装修风格是典型的法式乡村风格。酒吧下午5点开门营业，我们一行人6点到，里面已经是坐满了人，混着嘈杂的音乐，每个人拿着高脚杯一口一口的喝着不同颜色的啤酒。</p>
<p>好不容易找到了座位，拿到酒单，瞬间瞎眼了，虽然平时喝过不少啤酒，也算对啤酒有点了解，但看着琳琅满目的酒单，不免有点懵。上面的一些专业术语根本不知所云。于是一帮人拿着酒单研究了半天，我磕磕碰碰地好不容易给友人推荐了几款啤酒，点了了一盘生熏肉和奶酪的拼盘，就迫不及待的喝起来。</p>
<a id="more"></a>
<p>说来也惭愧，这次酒几乎都是我推荐给大家的。还想着自己对啤酒有所了解，能装装逼，但其实自己推荐的时候也是冷汗阵阵，自己都不知道说的对不对。果然，酒来了以后，有的人很喜欢，有的人说和自己的期望大相径庭，磊哥哥也是无奈。知识有限，看来装逼失败了。</p>
<p>虽然来酒吧喝酒喝得是气氛，好喝不好喝都无关紧要，但出于工科生的严谨，我还是恶补了一下啤酒的知识，这里分享给大家，希望下次能够装腔成功，哈哈。也希望你看了这篇文章后，能够从容应对精酿酒吧的酒单，成功地在朋友面前装腔。</p>
<p>闲话不说了，硬货来了。</p>
<h2 id="首先，你要懂啤酒的基本分类"><a href="#首先，你要懂啤酒的基本分类" class="headerlink" title="首先，你要懂啤酒的基本分类"></a>首先，你要懂啤酒的基本分类</h2><p>虽然说啤酒的种类成千上万，但你只需要了解常见的啤酒分类，并记住它们的特点，就能轻松装逼，而且，看到酒单就不会懵逼，心中自然有了底气。</p>
<p>啤酒最最最基本的分类只有两类。一种是<strong>艾尔（Ale）</strong>啤酒一种是<strong>拉格（Lager）</strong>啤酒。艾尔啤酒是上发酵的啤酒，也就是说酵母浮在温暖的麦芽汁上面，发酵温度较高，这种发酵方式能最大程度保留啤酒花的香味。拉格是下发酵的啤酒，酵母在麦芽汁下面，发酵温度较低，这种发酵方式更容易工业化生产。</p>
<p>一般来讲，由于发酵方式不同，Ale啤酒会先闻到啤酒花、酵母和其他添加剂的香味，然后是麦芽的芬芳，lager刚好相反，首先会感受到麦芽的香气，然后才是酵母和啤酒花的味道，所以通常Ale要比Lager好闻好喝一些。这里顺便提一句，市面上常见的啤酒，如青岛、百威、喜力或者国内吵到神话的德国黑啤，都属于美式工业淡lager的范畴。这是世界工业化进程的产物，而不是最早的啤酒，最早的啤酒，是Ale啤酒。</p>
<h2 id="然后，你要知道一些常见的衍生分类"><a href="#然后，你要知道一些常见的衍生分类" class="headerlink" title="然后，你要知道一些常见的衍生分类"></a>然后，你要知道一些常见的衍生分类</h2><p>知道lager和Ale的区别后，由于地域和使用啤酒花方式的不同，又衍生了各种各样的衍生分类。这些衍生分类成千上万，导致了啤酒世界的复杂性。你只需要知道一些最基本的衍生分类，足够你在精酿吧装逼了。</p>
<h4 id="ALE"><a href="#ALE" class="headerlink" title="ALE"></a>ALE</h4><p>一般情况下，说精酿啤酒，就是在说ALE。下面这几种常见的ale啤酒要熟记于心，给朋友推荐酒时，先问问朋友喜欢怎样的口味，是甜的，还是酸的，是苦的还是酒味重的等等，然后根据不同ale的风格，对号入座就可以啦。</p>
<ol>
<li>PALE ALE : 淡艾尔，英国的一种艾尔啤酒，酒味较淡，入口略苦，啤酒花的香味清新怡人。</li>
<li>INDIAN PALE ALE（IPA）：印式淡艾尔。也是英国的一种艾尔啤酒，这货不是印度产的，而是当时英国人在印度殖民，为了长途运输啤酒，在PALE ALE的基础上加入大量啤酒花，逐渐形成了现在的IPA。IPA酒味较重，闻起来啤酒花和酵母的味道丰满怡人，还会闻到蜂蜜的香甜，喝起来略苦，回香非常舒爽。</li>
<li>Stout：世涛啤酒。也是英国的一种Ale，采用烘烤过的啤酒花，所以颜色成黑褐色。它泡沫较细，闻起来有神器的巧克力和咖啡的味道。在传统stout的基础上，又衍生出imperial stout、Russian imperial Stout等等，风格和stout类似，但由于添加料不同和处理啤酒花的方式略有不同，风味也有区别。</li>
<li>Porter：波特啤酒。这货和Porto没有任何关系。也是一种英国的Ale，采用烘烤过的啤酒花酿制，和stout比较相近，但风格要比stout强劲和粗糙。</li>
<li>Belgian. Biere d’abaye：比利时修道院啤酒。比利时啤酒历史悠久，酿制方法由修道院世代相传。是世界公认的佳品。比利时啤酒气味芬芳多变，口感复杂浑厚，酒精和麦芽的香味都很足，有足够的陈年潜力。对新手来说，给他点一杯一杯比利时啤酒，逼格就足够了。</li>
<li>Lambic：通过自然发酵的啤酒，酿制方式复杂，可以和葡萄酒媲美，是精酿啤酒界的公主。这种啤酒，通常酸味和果味较重，甜度也不小，比较适合女生饮用。</li>
</ol>
<h4 id="Lager"><a href="#Lager" class="headerlink" title="Lager"></a>Lager</h4><p>说完Ale啤酒，该说说Lager了。一般情况下，了解Ale啤酒就足够你装逼了，但是为了更加突出你的品位，低调地凸显你喝的啤酒不在少数，以下的几种lager的风格和特点，还是要了解的：</p>
<ol>
<li>American lager: 美式lager，一般青岛呀、百威呀、哈尔滨呀，都属于美式lager的范围。他的特点是清爽寡淡，比较适合在夏天喝，用于解渴。通常，在精酿吧，如果有人点了一瓶美式lager，或者他是新手，或者他是老江湖。</li>
<li>Pale lager、Dark lager: 欧洲黄、黑lager。这种啤酒也是常见的工业lager。在国内红红火火的德国黑啤就是属于这种啤酒。风格和porter相似，但比porter淡多了。国内似乎只要加上德国黑啤的帽子，就能和高端啤酒挂钩，其实就工艺而言，只不过是最普通的工业lager罢了。</li>
<li>Pilsner：lager啤酒的一种，捷克人的骄傲。美式工业lager从Pilsner的基础上衍生而来，这样说来，Pilsner是现在所有工业啤酒的祖父。这种啤酒，口感清冽，简单讨好，苦味中等，带有微微的甜味，比较适合夏天饮用，也比较适合不喜欢复杂味道的新手饮用。如果推荐lager，Pilsner是不二之选。</li>
</ol>
<p>说到给朋友推荐啤酒，由于每个人口味不一，众口难调，即使把以上啤酒的风格特点记住，往往也很难推荐到满意的啤酒。这里给大家一张神图，存在手机里，没事干多看看，推荐啤酒时按图索骥，肯定能手到擒来，逼格满满。</p>
<h2 id="最后，你要会像老手一样批判国内一些关于啤酒的常识"><a href="#最后，你要会像老手一样批判国内一些关于啤酒的常识" class="headerlink" title="最后，你要会像老手一样批判国内一些关于啤酒的常识"></a>最后，你要会像老手一样批判国内一些关于啤酒的常识</h2><p>这是装逼的最后一个阶段，经过以上两步的洗礼，如果一切顺利的话，你的朋友大概已经被你折服。但是，有些朋友看你装逼心里也不爽，非要和你扯扯自己对啤酒的认识，也凸显下自己的逼格。这样做无可厚非，但是，如果出现以下的观点，那么恭喜你，你的装逼时间又到了。</p>
<ol>
<li><strong>“我最喜欢德国啤酒，德国啤酒是全世界最好的啤酒”</strong>：这句话，凸显了说话的人没喝过好啤酒。德国啤酒虽然不错，但并不是世界最好，比利时和法国啤酒分分钟秒杀德国啤酒。上面也说了，国内流行的德国黑啤不过是最平常不过的工业lager罢了，事实上，德国国内啤酒大部分也还是工业lager，算不上精酿的范畴。</li>
<li><strong>“啤酒有啥好喝不好喝的，就几块钱，又不是啥葡萄酒，喝着痛快就行了”</strong>：这句话，依旧体现了说话者的无知和无畏。啤酒价格亲民是不假，但论酿造方式和酿造历史，一点都不输给葡萄酒。一瓶精酿啤酒，往往凝聚着一个家族上千年的心血和努力，这份努力代代相传，才有你手中的啤酒。啤酒价格比葡萄酒低，有各种各样的原因，比如商业宣传呀，历史习俗沿袭呀等等。</li>
<li><strong>“啤酒不就是和朋友一起吃烧烤喝起来才爽嘛，这样品酒，还扯这么多东西，多没意思，随便找个啤酒喝喝就是了……”：</strong>要是有朋友说了这样类似的话，他肯定是被你逼急了，这时，最好的应对方式是：看傻逼似的白他一眼，叹息一声，深藏功与名……</li>
</ol>
<p>好了，这份装逼指南就到这里了，希望它能帮你在精酿啤酒吧过关斩将，顺利装逼。但是，这份指南里的一些关于啤酒的知识，也只是啤酒世界里的冰山一角，如果你去了精酿啤酒吧，爱上了精酿啤酒，还是多查查资料，虚心请教老手，多喝朋友喝喝，真正地让自己懂啤酒，让自己爱上啤酒……</p>
<p>最后，别忘了点赞啊。</p>
]]></content>
    </entry>
    
  
  
</search>
